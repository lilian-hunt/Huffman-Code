import java.util.Scanner;
import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.*;

class MyComparator implements Comparator<Node> {
    public int compare(Node x, Node y)
    {
        return x.getFreq() - y.getFreq();
    }
}
class MyASCIIComparator implements Comparator<Node> {
	public int compare(Node x, Node y){
		return x.getASCII()-y.getASCII(); 
	}
}
class HuffmanTree {
	public static HashMap<Character,String> printCode(Node root,String s, HashMap<Character,String> code)
    {
        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.getLeft() == null && root.getRight() == null) {
            System.out.println("'" + root.getChar() + "': " + s );
			code.put(root.getChar(), s);
			return code;
        }
 
        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.

        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.getLeft(), s + "0", code);
        printCode(root.getRight(), s + "1", code);
		return code;
    }
	public static void main(String[] args) {
		HashMap<Character,Integer> freq = new HashMap<Character,Integer>();
		Scanner stdin = new Scanner(System.in);
		System.out.print("Enter message: ");
		String message = stdin.nextLine();
		System.out.println();
		stdin.close();
		for (int i = 0; i<message.length();i++){
			Character c = message.charAt(i);
			if (freq.containsKey(c)){
				freq.put(c, freq.get(c)+1);
			}
			else{
				freq.put(c,1);
			}
		}
		int count = 0;
		int n = freq.keySet().size();
		ArrayList<Node> nodeArray = new ArrayList<Node>();
		for (Character c : freq.keySet()){
			Node a = new Node(c, freq.get(c));
			nodeArray.add(a);
		}
		while (nodeArray.size() > 1){
			Collections.sort(nodeArray, new MyComparator()); 
			int minFreq = nodeArray.get(0).getFreq();
			int secondMin = nodeArray.get(1).getFreq();
			if (minFreq == secondMin){
				ArrayList<Node> sortbyASCII = new ArrayList<Node>();
				sortbyASCII.add(nodeArray.get(0));
				sortbyASCII.add(nodeArray.get(1));
				int cc = 2;
				for (int i = 2; i < nodeArray.size(); i++){
					if (nodeArray.get(i).getFreq() == minFreq){
						sortbyASCII.add(nodeArray.get(i));
						cc ++;
					}
					else break;
				}

				Collections.sort(sortbyASCII, new MyASCIIComparator());
				// for (int i = 0; i < sortbyASCII.size(); i++){
				// 	System.out.println("c: " + sortbyASCII.get(i).getChar() + " f: " +sortbyASCII.get(i).getFreq()+ " ASCII: "+ sortbyASCII.get(i).getASCII());
				// }
				for (int i = 0; i < cc; i++){
					nodeArray.remove(0);
				}
				for (int i = cc-1; i >= 0; i--){
					nodeArray.add(0, sortbyASCII.get(i));
				}
			}
			else {
				ArrayList<Node> sortbyASCII = new ArrayList<Node>();
				sortbyASCII.add(nodeArray.get(1));
				int cc = 1;
				for (int i = 2; i < nodeArray.size(); i++){
					if (nodeArray.get(i).getFreq() == secondMin){
						sortbyASCII.add(nodeArray.get(i));
						cc ++;
					}
					else break;
				}

				Collections.sort(sortbyASCII, new MyASCIIComparator());
				 // for (int i = 0; i < sortbyASCII.size(); i++){
				 // 	System.out.println("Sort by ASCII c: " + sortbyASCII.get(i).getChar() + " f: " +sortbyASCII.get(i).getFreq()+ " ASCII: "+ sortbyASCII.get(i).getASCII());
				 // }
				for (int i = 0; i < cc; i++){
					nodeArray.remove(1);
				}
				for (int i = cc-1; i >= 0; i--){
					nodeArray.add(1, sortbyASCII.get(i));
				}
			}
			// System.out.println("Node array: iteration: " + nodeArray.size());
			// for (int i = 0; i < nodeArray.size(); i++){
			// 	System.out.println("c: " + nodeArray.get(i).getChar() + " f: " +nodeArray.get(i).getFreq()+ " ASCII: "+ nodeArray.get(i).getASCII());
			// }
			//create new node
			Node combine = new Node(nodeArray.get(0).isSmaller(nodeArray.get(1)),nodeArray.get(0).getFreq() + nodeArray.get(1).getFreq());
			combine.setRight(nodeArray.get(0));
			combine.setLeft(nodeArray.get(1));
			nodeArray.remove(0);
			nodeArray.remove(0);
			nodeArray.add(combine);
		}
		HashMap<Character,String> code = new HashMap<Character,String>();
		code = printCode(nodeArray.get(0), "", code);
		String toPrint = "";
		for (int i = 0; i < message.length(); i++){
			char a = message.charAt(i);
			toPrint += code.get(a);
		}
		System.out.println(toPrint);
	}
	
}
